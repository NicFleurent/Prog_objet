package pkTest;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collections;
import java.util.GregorianCalendar;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import pkClasses.BDItems;
import pkClasses.CompareDate;
import pkClasses.Dictionnaire;
import pkClasses.DisqueCompact;
import pkClasses.Dvd;
import pkClasses.ErreurBiblio;
import pkClasses.Journal;
import pkClasses.Livre;
import pkClasses.Multimedia;
import pkClasses.Periodique;
import pkClasses.Revue;
import pkClasses.Volume;

public class MainFrame implements ActionListener {
	
	private JFrame frame;
	
	private JPanel menu;
	private JPanel pnlAccueil;
	private JPanel pnlAjouter;
	private JPanel pnlSupprimer;
	private JPanel pnlVisualiser;
	private JPanel pnlAfficherConsole;
	private JPanel pnlArchiver;
	
	private JButton btnAjouter;
	private JButton btnSupprimer;
	private JButton btnModifer;
	private JButton btnVisualiser;
	private JButton btnAfficherConsole;
	private JButton btnArchiver;
	private JButton btnQuitter;
	
	private JLabel lblAccueil;
	
	private BDItems bdBiblio;
	
	public MainFrame() {
		initialize();
	}
	
	public void creerbdBase() {
		bdBiblio = new BDItems();
		Revue uneRevue = new Revue();
		Revue deuxRevue = new Revue();
		Revue troisRevue = new Revue();
		Revue quatreRevue = new Revue();
		
		Journal unJournal = new Journal();
		Journal deuxJournal = new Journal();
		Journal troisJournal = new Journal(); 
		Journal quatreJournal = new Journal();
		
		Dvd unDvd = new Dvd(); 
		Dvd deuxDvd = new Dvd();
		Dvd troisDvd = new Dvd(); 
		Dvd quatreDvd = new Dvd();
		
		DisqueCompact unDisqueCompact = new DisqueCompact();
		DisqueCompact deuxDisqueCompact = new DisqueCompact(); 
		DisqueCompact troisDisqueCompact = new DisqueCompact(); 
		DisqueCompact quatreDisqueCompact = new DisqueCompact();
		
		Livre unLivre = new Livre();
		Livre deuxLivre = new Livre();
		Livre troisLivre = new Livre();
		Livre quatreLivre = new Livre();
		
		Dictionnaire unDictionnaire = new Dictionnaire(); 
		Dictionnaire deuxDictionnaire = new Dictionnaire();
		Dictionnaire troisDictionnaire = new Dictionnaire();
		Dictionnaire quatreDictionnaire = new Dictionnaire();
		
		try{
			uneRevue = new Revue("7 jours", new GregorianCalendar(2023,4,28), 10, 795.564, 4.99, "Hebdomadaire", "Vol.34 no.27", "2049-3630", "Art et culture");
			deuxRevue = new Revue("Hockey le magazine", new GregorianCalendar(2022,10,1), 2, 790.5, 12.95, "Bimestriel", "Volume 17 numéro 2", "2434-561X", "Sport");
			troisRevue = new Revue("Coup de pouce", new GregorianCalendar(2023,3,1), 6, 370.87, 5.99, "Mensuelle", "Vol.40 no.1", "5890-357F", "Cuisine");
			quatreRevue = new Revue("Fine woodworking", new GregorianCalendar(1994,4,1), 3, 688.546, 6.95, "Bimestriel", "No.105", "8754-9867", "Ébénisterie");
			
			unJournal = new Journal("Le Nouvelliste", new GregorianCalendar(2005,12,12), 2, 70.575, 0.5, "Quotidienne", "12 decembre 2012", "5643-903E", "Mauricie");
			deuxJournal = new Journal("La Presse", new GregorianCalendar(2003,4,30), 1, 70.556, 0.65, "Quotidienne", "30 avril 2003", "8576-942KE", "Québec(Province)");
			troisJournal = new Journal("La Nouvelle Union", new GregorianCalendar(2023,5,15), 15, 70.576, 0.25, "Hebdomadaire", "15 mai 2023", "5196-5876", "Arthabaska/Érable");
			quatreJournal = new Journal("La Presse", new GregorianCalendar(1997,7,17), 1, 70.558, 0.75, "Quotidienne", "17 juillet 1997", "7548-985G", "Montréal");
			
			unDvd = new Dvd("Avatar", new GregorianCalendar(2009,12,18), 2, 520.568, 14.99, "Science-Fiction", "978-3-10-145687-0", 162, "James Cameron");
			deuxDvd = new Dvd("Star Wars, épisode VI : Le Retour du Jedi", new GregorianCalendar(1983,5,25), 3, 520.56, 129.99, "Science-Fiction", "978-3-11-587412-8", 135, "George Lucas");
			troisDvd = new Dvd("Les Minions", new GregorianCalendar(2015,7,10), 5, 790.867, 19.99, "Animation-Comédie", "978-4-12-876952-5", 91, "Kyle Balda");
			quatreDvd = new Dvd("Les Benchwarmers", new GregorianCalendar(2006,4,7), 1, 790.584, 4.99, "Baseball-Comédie", "978-3-43-654897-2", 82, "Dennis Dugan");
			
			unDisqueCompact = new DisqueCompact("Divisions", new GregorianCalendar(2019,9,13), 2, 780.589, 14.99, "Hard rock", "978-4-55-544354-6", 58.5, "Dustin Bates et Peter David", "Starset", 13);
			deuxDisqueCompact = new DisqueCompact("Nous autres", new GregorianCalendar(2015,4,14), 2, 780.784, 14.99, "Pop", "978-4-66-435627-7", 43.8, "Erik et Sonny Caouette", "2 Freres", 12);
			troisDisqueCompact = new DisqueCompact("Living Things", new GregorianCalendar(2012,6,26), 3, 780.595, 14.99, "Alternative rock", "978-4-65-642322-7", 36.99, "Chester Bennington et Mike Shinoda", "Linkin Park", 12);
			quatreDisqueCompact = new DisqueCompact("Moon landing", new GregorianCalendar(2013,10,18), 10, 780.444, 18.99, "Soft rock", "978-4-56-876956-3", 43.25, "James Blunt", "James Blunt", 11);
			
			unLivre = new Livre("La pierre du destin", new GregorianCalendar(2008,9,2), 5, 840.568, 24.95, "Édition Michel Quintin", "978-2-89435-384-4", "Fantastique", "Les messagers de gaïa", "Fredrick D'Anterny", 336);
			deuxLivre = new Livre("Les 3 mousquetaires", new GregorianCalendar(2016,8,2), 3, 840.548, 29.95, "Groupe Archambault", "622-2-091525-80", "Romans Étrangers", "non-applicable", "Alexandre Dumas", 620);
			troisLivre = new Livre("Pierre Gervais : au coeur du vestiaire", new GregorianCalendar(2022,11,18), 5, 920.547, 29.95, "Ovations Médias", "978-2-98211-600-9", "Sports", "non-applicable", "Mathias Brunet", 292);
			quatreLivre = new Livre("Sauces barbecue : beurres et marinades pour les grillades", new GregorianCalendar(2023,4,17), 5, 370.558, 34.95, "Homme", "978-2-761961-882", "Bases & Techniques", "non-applicable", "Steven Raichlen", 216);
			
			unDictionnaire = new Dictionnaire("Le Petit Robert de la langue française 2023", new GregorianCalendar(2022,2,1), 25, 440.589, 84.95, "Robert Ed LE", "978-2-32101-763-9", "francais");
			deuxDictionnaire = new Dictionnaire("Le Robert & Collins poche anglais : anglais-français, français-anglais N. éd.", new GregorianCalendar(2021,7,1), 10, 440.998, 12.95, "Robert Ed LE", "978-2-32101-661-8", "anglais-français");
			troisDictionnaire = new Dictionnaire("Le Petit Larousse illustré 2023", new GregorianCalendar(2022,7,1), 25, 440.598, 56.95, "Larousse", "978-2-03593-868-8", "francais");
			quatreDictionnaire = new Dictionnaire("Dictionnaire de poche français-espagnol", new GregorianCalendar(2022,8,1), 25, 440.788, 13.95, "Larousse", "978-2-03602-187-7", "espagnole-français");
		}
		catch(ErreurBiblio e1) {}
		
		bdBiblio.ajouter(uneRevue);
		bdBiblio.ajouter(deuxRevue);
		bdBiblio.ajouter(troisRevue);
		bdBiblio.ajouter(quatreRevue);
		bdBiblio.ajouter(unJournal);
		bdBiblio.ajouter(deuxJournal);
		bdBiblio.ajouter(troisJournal);
		bdBiblio.ajouter(quatreJournal);
		bdBiblio.ajouter(unDvd);
		bdBiblio.ajouter(deuxDvd);
		bdBiblio.ajouter(troisDvd);
		bdBiblio.ajouter(quatreDvd);
		bdBiblio.ajouter(unDisqueCompact);
		bdBiblio.ajouter(deuxDisqueCompact);
		bdBiblio.ajouter(troisDisqueCompact);
		bdBiblio.ajouter(quatreDisqueCompact);
		bdBiblio.ajouter(unLivre);
		bdBiblio.ajouter(deuxLivre);
		bdBiblio.ajouter(troisLivre);
		bdBiblio.ajouter(quatreLivre);
		bdBiblio.ajouter(unDictionnaire);
		bdBiblio.ajouter(deuxDictionnaire);
		bdBiblio.ajouter(troisDictionnaire);
		bdBiblio.ajouter(quatreDictionnaire);
	}
	
	//Prépare la fenêtre principal avec le menu et la page d'accueil
	private void initialize() {
		creerbdBase();
		
		frame = new JFrame();
		frame.setTitle("JCheckBox Demo");
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.setSize(1500, 800);
		frame.setMinimumSize(new Dimension(1300, 500));
		frame.setLayout(new BorderLayout(10, 10));
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		
		menu = new JPanel();
		menu.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 5));
		menu.setBackground(Color.GRAY);
		
		btnAjouter = new JButton("Ajouter un document");
		btnAjouter.addActionListener(this);
		menu.add(btnAjouter);
		
		btnSupprimer = new JButton("Supprimer un document");
		btnSupprimer.addActionListener(this);
		menu.add(btnSupprimer);
		
		btnModifer = new JButton("Modifier un document");
		btnModifer.addActionListener(this);
		menu.add(btnModifer);
		
		btnVisualiser = new JButton("Visualiser un document");
		btnVisualiser.addActionListener(this);
		menu.add(btnVisualiser);
		
		btnAfficherConsole = new JButton("Afficher les documents");
		btnAfficherConsole.addActionListener(this);
		menu.add(btnAfficherConsole);
		
		btnArchiver = new JButton("Archiver les documents");
		btnArchiver.addActionListener(this);
		menu.add(btnArchiver);
		
		btnQuitter = new JButton("Quitter l'application");
		btnQuitter.addActionListener(this);
		menu.add(btnQuitter);
		
		pnlAccueil = new JPanel();
		pnlAccueil.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 5));
		
		lblAccueil = new JLabel("Bienvenue dans l'application de gestion de la bibliothèque");
		lblAccueil.setFont(new Font("Sans-serif", Font.BOLD, 36));
		
		pnlAccueil.add(lblAccueil);
		
		frame.add(menu, BorderLayout.NORTH);
		frame.add(pnlAccueil, BorderLayout.CENTER);
		
	}

	//Permet d'afficher la page
	public void show() {
		frame.setVisible(true);
	}
	
	//Donne les effets aux boutons du menu
	public void actionPerformed(ActionEvent e) {
		String s = e.getActionCommand();
		if(s.equals("Ajouter un document")) {
			ajouterDocument();
		}
		else if(s.equals("Supprimer un document")) {
			System.out.println("Supprimer");
			supprimerDocument();
		}
		else if(s.equals("Modifier un document")) {
			System.out.println("Modifier");
			modifierDocument();
		}
		else if(s.equals("Visualiser un document")) {
			visualiserDocument();
			System.out.println("Visualiser");
		}
		else if(s.equals("Afficher les documents")) {
			afficher();
		}
		else if(s.equals("Archiver les documents")) {
			System.out.println("Archiver");
			archiverDocuments();
		}
		else if(s.equals("Quitter l'application")) {
			System.exit(0);
		}
	}
	
	
	//***********************************************************************************************
	//Création de la page ajouter
	//***********************************************************************************************
	private void ajouterDocument() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlSupprimer);} catch(NullPointerException npe) {}
		try {frame.remove(pnlVisualiser);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAfficherConsole);} catch(NullPointerException npe) {}
		try {frame.remove(pnlArchiver);} catch(NullPointerException npe) {}
		
		pnlAjouter = new JPanel();
		pnlAjouter.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 5));
		
		JLabel lblAjoutTypeDoc = new JLabel("Quel type de document souhaitez-vous ajouter?");
		
		String[] strListeTypeDoc = {"Revue", "Journal", "Dvd", "Disque Compact", "Livre", "Dictionnaire"};
		
		JComboBox<String> jcbListeTypeDoc = new JComboBox<String>(strListeTypeDoc);
		jcbListeTypeDoc.setSelectedIndex(0);

		JLabel lblAjoutEspaceur1 = new JLabel(" ");
		lblAjoutEspaceur1.setPreferredSize(new Dimension(1000, 15));
		
		pnlAjouter.add(lblAjoutTypeDoc);
		pnlAjouter.add(jcbListeTypeDoc);
		pnlAjouter.add(lblAjoutEspaceur1);
		
		frame.add(pnlAjouter, BorderLayout.CENTER);
		frame.revalidate();
		frame.repaint();
		
		//***********************************************************************************************
		//Changement de la page selon le type de document
		//***********************************************************************************************
		jcbListeTypeDoc.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				@SuppressWarnings("rawtypes")
				JComboBox cb = (JComboBox) e.getSource();
				String type = (String) cb.getSelectedItem();
				
				pnlAjouter.removeAll();
				
				JLabel lblAjoutTitre = new JLabel("Quel est le titre?");
				JTextField tfAjoutTitre = new JTextField(10);
				
				JLabel lblAjoutDate = new JLabel("Quel est la date de création?");
				JTextField tfAjoutDate = new JTextField(10);
				tfAjoutDate.setText("AAAA-MM-JJ");
				
				JLabel lblAjoutNbrCopie = new JLabel("Combien de copies de possèdons-nous?");
				JTextField tfAjoutNbrCopie = new JTextField(10);
				
				JLabel lblAjoutCoteDewey = new JLabel("Quel est la cote Dewey?");
				JTextField tfAjoutCoteDewey = new JTextField(10);
				
				JLabel lblAjoutValeur = new JLabel("Quel est la valeur?");
				JTextField tfAjoutValeur = new JTextField(10);
				
				JLabel lblAjoutPeriodicite = new JLabel("Quel est la periodicité?");
				JTextField tfAjoutPeriodicite = new JTextField(10);
				
				JLabel lblAjoutNumPeriode = new JLabel("Quel est le numéro de période?");
				JTextField tfAjoutNumPeriode = new JTextField(10);
				
				JLabel lblAjoutIssn = new JLabel("Quel est l'issn?");
				JTextField tfAjoutIssn = new JTextField(10);
				
				JLabel lblAjoutRegion = new JLabel("Quel est la région?");
				JTextField tfAjoutRegion = new JTextField(10);
				
				JLabel lblAjoutSujet = new JLabel("Quel est le sujet?");
				JTextField tfAjoutSujet = new JTextField(10);
				
				JLabel lblAjoutDuree = new JLabel("Quel est la durée?");
				JTextField tfAjoutDuree = new JTextField(10);
				
				JLabel lblAjoutIsbn = new JLabel("Quel est l'isbn?");
				JTextField tfAjoutIsbn = new JTextField(10);
				
				JLabel lblAjoutCineaste = new JLabel("Quel est le cinéaste ayant réaliser ce film?");
				JTextField tfAjoutCineaste = new JTextField(10);
				
				JLabel lblAjoutAuteur = new JLabel("Qui est l'auteur?");
				JTextField tfAjoutAuteur = new JTextField(10);
				
				JLabel lblAjoutGroupe = new JLabel("Quel est le groupe?");
				JTextField tfAjoutGroupe = new JTextField(10);
				
				JLabel lblAjoutNbrPiste = new JLabel("Combien y a-t-il de pistes?");
				JTextField tfAjoutNbrPiste = new JTextField(10);
				
				JLabel lblAjoutEditeur = new JLabel("Qui est l'éditeur?");
				JTextField tfAjoutEditeur = new JTextField(10);
				
				JLabel lblAjoutCategorie = new JLabel("Quel est la catégorie?");
				JTextField tfAjoutCategorie = new JTextField(10);
				
				JLabel lblAjoutCollection = new JLabel("Quel est le collection?");
				JTextField tfAjoutCollection = new JTextField(10);
				
				JLabel lblAjoutNbrPage = new JLabel("Combien de pages contient ce livre?");
				JTextField tfAjoutNbrPage = new JTextField(10);
				
				JLabel lblAjoutType = new JLabel("Quel est le type du dictionnaire?");
				JTextField tfAjoutType = new JTextField(10);
				
				JButton btnEnvoiAjout = new JButton("Ajouter");
				
				
				pnlAjouter.add(lblAjoutTypeDoc);
				pnlAjouter.add(jcbListeTypeDoc);
				pnlAjouter.add(lblAjoutEspaceur1);
				pnlAjouter.add(lblAjoutTitre);
				pnlAjouter.add(tfAjoutTitre);
				pnlAjouter.add(lblAjoutDate);
				pnlAjouter.add(tfAjoutDate);
				pnlAjouter.add(lblAjoutNbrCopie);
				pnlAjouter.add(tfAjoutNbrCopie);
				pnlAjouter.add(lblAjoutCoteDewey);
				pnlAjouter.add(tfAjoutCoteDewey);
				pnlAjouter.add(lblAjoutValeur);
				pnlAjouter.add(tfAjoutValeur);
				
				
				if(type == "Revue") {
					pnlAjouter.add(lblAjoutPeriodicite);
					pnlAjouter.add(tfAjoutPeriodicite);
					pnlAjouter.add(lblAjoutNumPeriode);
					pnlAjouter.add(tfAjoutNumPeriode);
					pnlAjouter.add(lblAjoutIssn);
					pnlAjouter.add(tfAjoutIssn);
					pnlAjouter.add(lblAjoutSujet);
					pnlAjouter.add(tfAjoutSujet);
					pnlAjouter.add(btnEnvoiAjout);
				}
				else if(type == "Journal") {
					
					pnlAjouter.add(lblAjoutPeriodicite);
					pnlAjouter.add(tfAjoutPeriodicite);
					pnlAjouter.add(lblAjoutNumPeriode);
					pnlAjouter.add(tfAjoutNumPeriode);
					pnlAjouter.add(lblAjoutIssn);
					pnlAjouter.add(tfAjoutIssn);
					pnlAjouter.add(lblAjoutRegion);
					pnlAjouter.add(tfAjoutRegion);
					pnlAjouter.add(btnEnvoiAjout);
				}
				else if(type == "Dvd") {
					
					pnlAjouter.add(lblAjoutSujet);
					pnlAjouter.add(tfAjoutSujet);
					pnlAjouter.add(lblAjoutDuree);
					pnlAjouter.add(tfAjoutDuree);
					pnlAjouter.add(lblAjoutIsbn);
					pnlAjouter.add(tfAjoutIsbn);
					pnlAjouter.add(lblAjoutCineaste);
					pnlAjouter.add(tfAjoutCineaste);
					pnlAjouter.add(btnEnvoiAjout);
				}
				else if(type == "Disque Compact") {
					
					pnlAjouter.add(lblAjoutSujet);
					pnlAjouter.add(tfAjoutSujet);
					pnlAjouter.add(lblAjoutDuree);
					pnlAjouter.add(tfAjoutDuree);
					pnlAjouter.add(lblAjoutIsbn);
					pnlAjouter.add(tfAjoutIsbn);
					pnlAjouter.add(lblAjoutAuteur);
					pnlAjouter.add(tfAjoutAuteur);
					pnlAjouter.add(lblAjoutGroupe);
					pnlAjouter.add(tfAjoutGroupe);
					pnlAjouter.add(lblAjoutNbrPiste);
					pnlAjouter.add(tfAjoutNbrPiste);
					pnlAjouter.add(btnEnvoiAjout);
				}
				else if(type == "Livre") {
					JLabel lblAjoutEspaceur2 = new JLabel(" ");
					lblAjoutEspaceur2.setPreferredSize(new Dimension(200, 15));
					
					pnlAjouter.add(lblAjoutEditeur);
					pnlAjouter.add(tfAjoutEditeur);
					pnlAjouter.add(lblAjoutIsbn);
					pnlAjouter.add(tfAjoutIsbn);
					pnlAjouter.add(lblAjoutCategorie);
					pnlAjouter.add(tfAjoutCategorie);
					pnlAjouter.add(lblAjoutCollection);
					pnlAjouter.add(tfAjoutCollection);
					pnlAjouter.add(lblAjoutAuteur);
					pnlAjouter.add(tfAjoutAuteur);
					pnlAjouter.add(lblAjoutEspaceur2);
					pnlAjouter.add(lblAjoutNbrPage);
					pnlAjouter.add(tfAjoutNbrPage);
					pnlAjouter.add(btnEnvoiAjout);
				}
				else if(type == "Dictionnaire") {
	
					pnlAjouter.add(lblAjoutEditeur);
					pnlAjouter.add(tfAjoutEditeur);
					pnlAjouter.add(lblAjoutIsbn);
					pnlAjouter.add(tfAjoutIsbn);
					pnlAjouter.add(lblAjoutType);
					pnlAjouter.add(tfAjoutType);
					pnlAjouter.add(btnEnvoiAjout);
				}
				
				pnlAjouter.revalidate();
				pnlAjouter.repaint();
				
				//***********************************************************************************************
				//Création de l'item avec le bouton Ajouter
				//***********************************************************************************************
				btnEnvoiAjout.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						boolean sansErreur = true;
						boolean erreurDate = false;
						String messageErreur = "";
						
						String strTitre = tfAjoutTitre.getText();
						
						String strDate = tfAjoutDate.getText();
						
						try {
							validerMois(strDate);
						}
						catch(ErreurBiblio e1) {
							messageErreur += "\n" + e1.message();
							sansErreur = false;
						}
						catch(NumberFormatException nfe) {
							if(!erreurDate) {
								messageErreur += "\nEntrer une date au format AAAA-MM-JJ";
								erreurDate = true;
							}
							sansErreur = false;
						}
						
						try {
							validerJour(strDate);
						}
						catch(ErreurBiblio e1) {
							messageErreur += "\n" + e1.message();
							sansErreur = false;
						}
						catch(NumberFormatException nfe) {
							if(!erreurDate) {
								messageErreur += "\nEntrer une date au format AAAA-MM-JJ";
								erreurDate = true;
							}
							sansErreur = false;
						}
						
						GregorianCalendar date = new GregorianCalendar();
						try {
							date.set(GregorianCalendar.YEAR,Integer.parseInt(strDate.substring(0, 4)));
							date.set(GregorianCalendar.MONTH,Integer.parseInt(strDate.substring(5, 7)) - 1);
							date.set(GregorianCalendar.DAY_OF_MONTH,Integer.parseInt(strDate.substring(8, 10)));
						}
						catch(NumberFormatException nfe) {
							if(!erreurDate) {
								messageErreur += "\nEntrer une date au format AAAA-MM-JJ";
								erreurDate = true;
							}
							sansErreur = false;
						}
						
						int iNbrCopie = 0;
						try {
							iNbrCopie = Integer.parseInt(tfAjoutNbrCopie.getText());
						}
						catch(NumberFormatException nfe) {
							messageErreur += "\nEntrer un nombre entier pour le nombre de copies";
							sansErreur = false;
						}
						
						double dCoteDewey = 0;
						try {
							dCoteDewey = Double.parseDouble(tfAjoutCoteDewey.getText());
						}
						catch(NumberFormatException nfe) {
							messageErreur += "\nEntrer un nombre réel pour la cote Dewey";
							sansErreur = false;
						}
						
						double dValeur = 0;
						try {
							dValeur = Double.parseDouble(tfAjoutValeur.getText());
						}
						catch(NumberFormatException nfe) {
							messageErreur += "\nEntrer un nombre réel pour la valeur";
							sansErreur = false;
						}
						
						if(type == "Revue") {
							String strPeriodicite = tfAjoutPeriodicite.getText();
							String strNumPeriode = tfAjoutNumPeriode.getText();
							String strIssn = tfAjoutIssn.getText();
							String strSujet = tfAjoutSujet.getText();
							
							if(sansErreur) {
								try {
									Revue revue = new Revue(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strPeriodicite,
											strNumPeriode, strIssn, strSujet);
									bdBiblio.ajouter(revue);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutPeriodicite.setText("");
									tfAjoutNumPeriode.setText("");
									tfAjoutIssn.setText("");
									tfAjoutSujet.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
						}
						else if(type == "Journal") {
							String strPeriodicite = tfAjoutPeriodicite.getText();
							String strNumPeriode = tfAjoutNumPeriode.getText();
							String strIssn = tfAjoutIssn.getText();
							String strRegion = tfAjoutRegion.getText();
							
							if(sansErreur) {
								try {
									Journal journal = new Journal(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strPeriodicite,
											strNumPeriode, strIssn, strRegion);
									bdBiblio.ajouter(journal);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutPeriodicite.setText("");
									tfAjoutNumPeriode.setText("");
									tfAjoutIssn.setText("");
									tfAjoutRegion.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
							
						}
						else if(type == "Dvd") {
							String strSujet = tfAjoutSujet.getText();
							String strIsbn = tfAjoutIsbn.getText();
	
							double dDuree = 0;
							try {
								dDuree = Double.parseDouble(tfAjoutDuree.getText());
							}
							catch(NumberFormatException nfe) {
								messageErreur += "\nEntrer un nombre réel pour la durée";
								sansErreur = false;
							}
	
							String strCineaste = tfAjoutCineaste.getText();
							
							if(sansErreur) {
								try {
									Dvd dvd = new Dvd(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strSujet,
											strIsbn, dDuree, strCineaste);
									bdBiblio.ajouter(dvd);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutSujet.setText("");
									tfAjoutIsbn.setText("");
									tfAjoutDuree.setText("");
									tfAjoutCineaste.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
							
						}
						else if(type == "Disque Compact") {
							String strSujet = tfAjoutSujet.getText();
	
							double dDuree = 0;
							try {
								dDuree = Double.parseDouble(tfAjoutDuree.getText());
							}
							catch(NumberFormatException nfe) {
								messageErreur += "\nEntrer un nombre réel pour la durée";
								sansErreur = false;
							}
	
							String strIsbn = tfAjoutIsbn.getText();
							String strAuteur = tfAjoutAuteur.getText();
							String strGroupe = tfAjoutGroupe.getText();
	
							int iNbrPiste = 0;
							try {
								iNbrPiste = Integer.parseInt(tfAjoutNbrPiste.getText());
							}
							catch(NumberFormatException nfe) {
								messageErreur += "\nEntrer un nombre entier pour la nombre de pistes";
								sansErreur = false;
							}
							
							if(sansErreur) {
								try {
									DisqueCompact disqueCompact = new DisqueCompact(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strSujet,
											strIsbn, dDuree, strAuteur, strGroupe, iNbrPiste);
									bdBiblio.ajouter(disqueCompact);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutSujet.setText("");
									tfAjoutIsbn.setText("");
									tfAjoutDuree.setText("");
									tfAjoutAuteur.setText("");
									tfAjoutGroupe.setText("");
									tfAjoutNbrPiste.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
						}
						else if(type == "Livre") {
							String strEditeur = tfAjoutEditeur.getText();
							String strIsbn = tfAjoutIsbn.getText();
							String strCategorie = tfAjoutCategorie.getText();
							String strCollection = tfAjoutCollection.getText();
							String strAuteur = tfAjoutAuteur.getText();
							
							int iNbrPage = 0;
							try {
								iNbrPage = Integer.parseInt(tfAjoutNbrPage.getText());
							}
							catch(NumberFormatException nfe) {
								messageErreur += "\nEntrer un nombre entier pour la nombre de page";
								sansErreur = false;
							}
							
							if(sansErreur) {
								try {
									Livre livre = new Livre(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strEditeur,
											strIsbn, strCategorie, strCollection, strAuteur, iNbrPage);
									bdBiblio.ajouter(livre);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutEditeur.setText("");
									tfAjoutIsbn.setText("");
									tfAjoutCategorie.setText("");
									tfAjoutCollection.setText("");
									tfAjoutAuteur.setText("");
									tfAjoutNbrPage.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
							
						}
						else if(type == "Dictionnaire") {
							String strEditeur = tfAjoutEditeur.getText();
							String strIsbn = tfAjoutIsbn.getText();
							String strType = tfAjoutType.getText();
							
							if(sansErreur) {
								try {
									Dictionnaire dictionnaire = new Dictionnaire(strTitre, date, iNbrCopie, dCoteDewey, dValeur, strEditeur,
											strIsbn, strType);
									bdBiblio.ajouter(dictionnaire);
									tfAjoutTitre.setText("");
									tfAjoutDate.setText("AAAA-MM-JJ");
									tfAjoutNbrCopie.setText("");
									tfAjoutCoteDewey.setText("");
									tfAjoutValeur.setText("");
									tfAjoutEditeur.setText("");
									tfAjoutIsbn.setText("");
									tfAjoutType.setText("");
									JOptionPane.showMessageDialog(null, "Le document à été ajouter à la base de données");
								} catch (ErreurBiblio e1) {
									JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de données\n " + e1.message());
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "L'item n'a pas été ajouter à la base de donnée" + messageErreur);
							}
							
						}
						
					}
					
				});
				
			}
			
		});		
	}
	
	private void supprimerDocument() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAjouter);} catch(NullPointerException npe) {}
		try {frame.remove(pnlVisualiser);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAfficherConsole);} catch(NullPointerException npe) {}
		try {frame.remove(pnlArchiver);} catch(NullPointerException npe) {}
		
		frame.revalidate();
		frame.repaint();
		
	}
	
	private void modifierDocument() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAjouter);} catch(NullPointerException npe) {}
		try {frame.remove(pnlSupprimer);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAfficherConsole);} catch(NullPointerException npe) {}
		try {frame.remove(pnlArchiver);} catch(NullPointerException npe) {}
		
		frame.revalidate();
		frame.repaint();
		
	}
	
	private void visualiserDocument() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAjouter);} catch(NullPointerException npe) {}
		try {frame.remove(pnlSupprimer);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAfficherConsole);} catch(NullPointerException npe) {}
		try {frame.remove(pnlArchiver);} catch(NullPointerException npe) {}
		
		frame.revalidate();
		frame.repaint();
	}
	
	//***********************************************************************************************
	//Création de la page afficher
	//***********************************************************************************************
	private void afficher() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAjouter);} catch(NullPointerException npe) {}
		try {frame.remove(pnlSupprimer);} catch(NullPointerException npe) {}
		try {frame.remove(pnlVisualiser);} catch(NullPointerException npe) {}
		try {frame.remove(pnlArchiver);} catch(NullPointerException npe) {}
		
		Collections.sort(bdBiblio.getListeItems(), new CompareDate());
		
		pnlAfficherConsole = new JPanel();
		pnlAfficherConsole.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 5));

		JLabel lblAfficherConsole = new JLabel("Voici les items de la bibliothèque");
		lblAfficherConsole.setFont(new Font("Arial", Font.BOLD, 36));
		pnlAfficherConsole.add(lblAfficherConsole);
		
		JPanel pnlAfficherBouton = new JPanel();
		pnlAfficherBouton.setPreferredSize(new Dimension(1295, 40));
		pnlAfficherBouton.setLayout(new FlowLayout(FlowLayout.CENTER));
		
		JButton btnPeriodique = new JButton("Périodique");
		btnPeriodique.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				pnlAfficherConsole.removeAll();
				pnlAfficherConsole.add(lblAfficherConsole);
				pnlAfficherConsole.add(pnlAfficherBouton);
				
				for(int i = 0 ; i < bdBiblio.size() ; i++) {
					if(bdBiblio.lire(i) instanceof Periodique) {
						JPanel pnlAfficher = new JPanel();
						pnlAfficher.setPreferredSize(new Dimension(1295, 20));
						pnlAfficher.setLayout(new FlowLayout(FlowLayout.LEFT, 30, 0));
						JTextArea taAfficher = new JTextArea(bdBiblio.lire(i).toString());
						taAfficher.setFont(new Font("Arial", Font.PLAIN, 13));
						taAfficher.setPreferredSize(new Dimension(1295, 20));
						taAfficher.setLineWrap(true);
						pnlAfficher.add(taAfficher);
						pnlAfficherConsole.add(pnlAfficher);
					}
				}
				frame.revalidate();
				frame.repaint();
				
			}
			
		});
		pnlAfficherBouton.add(btnPeriodique);
		
		JButton btnMultimedia = new JButton("Multimédia");
		btnMultimedia.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				pnlAfficherConsole.removeAll();
				pnlAfficherConsole.add(lblAfficherConsole);
				pnlAfficherConsole.add(pnlAfficherBouton);
				
				for(int i = 0 ; i < bdBiblio.size() ; i++) {
					if(bdBiblio.lire(i) instanceof Multimedia) {
						JPanel pnlAfficher = new JPanel();
						pnlAfficher.setPreferredSize(new Dimension(1295, 20));
						pnlAfficher.setLayout(new FlowLayout(FlowLayout.LEFT, 30, 0));
						JTextArea taAfficher = new JTextArea(bdBiblio.lire(i).toString());
						taAfficher.setFont(new Font("Arial", Font.PLAIN, 13));
						taAfficher.setPreferredSize(new Dimension(1295, 20));
						taAfficher.setLineWrap(true);
						pnlAfficher.add(taAfficher);
						pnlAfficherConsole.add(pnlAfficher);
					}
				}
				frame.revalidate();
				frame.repaint();
				
			}
			
		});
		pnlAfficherBouton.add(btnMultimedia);
		
		JButton btnVolume = new JButton("Volume");
		btnVolume.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				pnlAfficherConsole.removeAll();
				pnlAfficherConsole.add(lblAfficherConsole);
				pnlAfficherConsole.add(pnlAfficherBouton);
				
				for(int i = 0 ; i < bdBiblio.size() ; i++) {
					if(bdBiblio.lire(i) instanceof Volume) {
						JPanel pnlAfficher = new JPanel();
						pnlAfficher.setPreferredSize(new Dimension(1295, 20));
						pnlAfficher.setLayout(new FlowLayout(FlowLayout.LEFT, 30, 0));
						JTextArea taAfficher = new JTextArea(bdBiblio.lire(i).toString());
						taAfficher.setFont(new Font("Arial", Font.PLAIN, 13));
						taAfficher.setPreferredSize(new Dimension(1295, 20));
						taAfficher.setLineWrap(true);
						pnlAfficher.add(taAfficher);
						pnlAfficherConsole.add(pnlAfficher);
					}
				}
				frame.revalidate();
				frame.repaint();
				
			}
			
		});
		pnlAfficherBouton.add(btnVolume);
		pnlAfficherConsole.add(pnlAfficherBouton);
		
		
		frame.add(pnlAfficherConsole, BorderLayout.CENTER);
		frame.revalidate();
		frame.repaint();
		
	}
	
	private void archiverDocuments() {
		try {frame.remove(pnlAccueil);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAjouter);} catch(NullPointerException npe) {}
		try {frame.remove(pnlSupprimer);} catch(NullPointerException npe) {}
		try {frame.remove(pnlVisualiser);} catch(NullPointerException npe) {}
		try {frame.remove(pnlAfficherConsole);} catch(NullPointerException npe) {}
		
		frame.revalidate();
		frame.repaint();
		
	}
	
	private void validerMois(String date) throws ErreurBiblio, NumberFormatException {
		int mois = 0;		
		try {
			mois = Integer.parseInt(date.substring(5, 7));
		}
		catch(NumberFormatException nfe) {
			throw new NumberFormatException();
		}
		if(!(mois >= 1 && mois <= 12)) {
			throw new ErreurBiblio("mois");
		}
	}
	
	private void validerJour(String date) throws ErreurBiblio {
		int annee = 0;
		int mois = 0;
		int jour = 0;
		
		
		try {
			annee = Integer.parseInt(date.substring(0, 4));
			mois = Integer.parseInt(date.substring(5, 7));
			jour = Integer.parseInt(date.substring(8, 10));
			final int ANNEE_BISEX_4 = 4;
			final int ANNEE_BISEX_100 = 100;
			final int ANNEE_BISEX_400 = 400;
			
			switch (mois)
			{
			case 1:	case 3:	case 5:	case 7:	case 8: case 10: case 12:	if(jour >= 1 && jour <= 31) {} else { throw new ErreurBiblio("jour"); } break;
			
			case 2:	if (annee % ANNEE_BISEX_4 == 0) {
						if (annee % ANNEE_BISEX_100 == 0)
							if (annee % ANNEE_BISEX_400 == 0)				
								if(jour >= 1 && jour <= 29) {} else { throw new ErreurBiblio("jour"); }
							else											
								if(jour >= 1 && jour <= 28) {} else { throw new ErreurBiblio("jour"); }
						else												
							if(jour >= 1 && jour <= 29) {} else { throw new ErreurBiblio("jour"); }
					}
					else													
						if(jour >= 1 && jour <= 28) {} else { throw new ErreurBiblio("jour"); } break;
			
			case 4:	case 6:	case 9:	case 11:	if(jour >= 1 && jour <= 30) {} else { throw new ErreurBiblio("jour"); } break;
			}
		}
		catch(NumberFormatException nfe) {
			throw new NumberFormatException();
		}
	}

}
